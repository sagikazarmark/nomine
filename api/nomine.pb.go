// Code generated by protoc-gen-go.
// source: nomine.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	nomine.proto

It has these top-level messages:
	NameCheckRequest
	NameCheckResponse
	MultiNameCheckRequest
	MultiNameCheckResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Result int32

const (
	Result_NOTHING     Result = 0
	Result_AVAILABLE   Result = 1
	Result_UNAVAILABLE Result = 2
	Result_UNKOWN      Result = 3
)

var Result_name = map[int32]string{
	0: "NOTHING",
	1: "AVAILABLE",
	2: "UNAVAILABLE",
	3: "UNKOWN",
}
var Result_value = map[string]int32{
	"NOTHING":     0,
	"AVAILABLE":   1,
	"UNAVAILABLE": 2,
	"UNKOWN":      3,
}

func (x Result) String() string {
	return proto.EnumName(Result_name, int32(x))
}
func (Result) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NameCheckRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
}

func (m *NameCheckRequest) Reset()                    { *m = NameCheckRequest{} }
func (m *NameCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*NameCheckRequest) ProtoMessage()               {}
func (*NameCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NameCheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameCheckRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type NameCheckResponse struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *NameCheckResponse) Reset()                    { *m = NameCheckResponse{} }
func (m *NameCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*NameCheckResponse) ProtoMessage()               {}
func (*NameCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NameCheckResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type MultiNameCheckRequest struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Services []string `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *MultiNameCheckRequest) Reset()                    { *m = MultiNameCheckRequest{} }
func (m *MultiNameCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*MultiNameCheckRequest) ProtoMessage()               {}
func (*MultiNameCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiNameCheckRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MultiNameCheckRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type MultiNameCheckResponse struct {
	Results map[string]Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=nomine.Result"`
}

func (m *MultiNameCheckResponse) Reset()                    { *m = MultiNameCheckResponse{} }
func (m *MultiNameCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*MultiNameCheckResponse) ProtoMessage()               {}
func (*MultiNameCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MultiNameCheckResponse) GetResults() map[string]Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*NameCheckRequest)(nil), "nomine.NameCheckRequest")
	proto.RegisterType((*NameCheckResponse)(nil), "nomine.NameCheckResponse")
	proto.RegisterType((*MultiNameCheckRequest)(nil), "nomine.MultiNameCheckRequest")
	proto.RegisterType((*MultiNameCheckResponse)(nil), "nomine.MultiNameCheckResponse")
	proto.RegisterEnum("nomine.Result", Result_name, Result_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nomine service

type NomineClient interface {
	Check(ctx context.Context, in *NameCheckRequest, opts ...grpc.CallOption) (*NameCheckResponse, error)
	MultiCheck(ctx context.Context, in *MultiNameCheckRequest, opts ...grpc.CallOption) (*MultiNameCheckResponse, error)
}

type nomineClient struct {
	cc *grpc.ClientConn
}

func NewNomineClient(cc *grpc.ClientConn) NomineClient {
	return &nomineClient{cc}
}

func (c *nomineClient) Check(ctx context.Context, in *NameCheckRequest, opts ...grpc.CallOption) (*NameCheckResponse, error) {
	out := new(NameCheckResponse)
	err := grpc.Invoke(ctx, "/nomine.Nomine/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nomineClient) MultiCheck(ctx context.Context, in *MultiNameCheckRequest, opts ...grpc.CallOption) (*MultiNameCheckResponse, error) {
	out := new(MultiNameCheckResponse)
	err := grpc.Invoke(ctx, "/nomine.Nomine/MultiCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nomine service

type NomineServer interface {
	Check(context.Context, *NameCheckRequest) (*NameCheckResponse, error)
	MultiCheck(context.Context, *MultiNameCheckRequest) (*MultiNameCheckResponse, error)
}

func RegisterNomineServer(s *grpc.Server, srv NomineServer) {
	s.RegisterService(&_Nomine_serviceDesc, srv)
}

func _Nomine_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomineServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomine.Nomine/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomineServer).Check(ctx, req.(*NameCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nomine_MultiCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiNameCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NomineServer).MultiCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nomine.Nomine/MultiCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NomineServer).MultiCheck(ctx, req.(*MultiNameCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nomine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nomine.Nomine",
	HandlerType: (*NomineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Nomine_Check_Handler,
		},
		{
			MethodName: "MultiCheck",
			Handler:    _Nomine_MultiCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nomine.proto",
}

func init() { proto.RegisterFile("nomine.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x5f, 0xaa, 0xd3, 0x40,
	0x14, 0x87, 0x9d, 0xc4, 0xa4, 0xf6, 0xa4, 0xd6, 0x74, 0xc0, 0x9a, 0x06, 0xff, 0x94, 0xe0, 0x43,
	0x69, 0xa1, 0x81, 0xfa, 0x22, 0x7d, 0x32, 0x95, 0x52, 0xab, 0x35, 0x85, 0x60, 0x15, 0x04, 0x85,
	0x58, 0x86, 0x1a, 0x9a, 0xce, 0xc4, 0x4c, 0x52, 0x28, 0xa5, 0x2f, 0x6e, 0xc1, 0x65, 0xb8, 0x10,
	0x17, 0xe0, 0x16, 0x5c, 0x88, 0x74, 0x26, 0xd1, 0x52, 0x7a, 0x2f, 0xf7, 0x6d, 0xce, 0x39, 0x73,
	0x7e, 0x5f, 0xe6, 0x23, 0x50, 0xa3, 0x6c, 0x13, 0x51, 0xd2, 0x4f, 0x52, 0x96, 0x31, 0xac, 0xcb,
	0xca, 0x7e, 0xb8, 0x62, 0x6c, 0x15, 0x13, 0x37, 0x4c, 0x22, 0x37, 0xa4, 0x94, 0x65, 0x61, 0x16,
	0x31, 0xca, 0xe5, 0x2d, 0xe7, 0x05, 0x98, 0x7e, 0xb8, 0x21, 0x2f, 0xbf, 0x92, 0xe5, 0x3a, 0x20,
	0xdf, 0x72, 0xc2, 0x33, 0x8c, 0xe1, 0x36, 0x0d, 0x37, 0xc4, 0x42, 0x6d, 0xd4, 0xa9, 0x06, 0xe2,
	0x8c, 0x2d, 0xa8, 0x70, 0x92, 0x6e, 0xa3, 0x25, 0xb1, 0x14, 0xd1, 0x2e, 0x4b, 0xa7, 0x07, 0x8d,
	0x93, 0x04, 0x9e, 0x30, 0xca, 0x09, 0x6e, 0x82, 0x9e, 0x12, 0x9e, 0xc7, 0x99, 0x08, 0xd1, 0x82,
	0xa2, 0x72, 0x26, 0x70, 0xff, 0x6d, 0x1e, 0x67, 0xd1, 0x8d, 0x98, 0x36, 0xdc, 0x29, 0x20, 0xdc,
	0x52, 0xda, 0x6a, 0xa7, 0x1a, 0xfc, 0xab, 0x9d, 0x9f, 0x08, 0x9a, 0xe7, 0x49, 0x05, 0x7b, 0x0c,
	0x15, 0x49, 0xe3, 0x16, 0x6a, 0xab, 0x1d, 0x63, 0xd0, 0xeb, 0x17, 0x62, 0x2e, 0x2f, 0xf4, 0x03,
	0x79, 0x7b, 0x4c, 0xb3, 0x74, 0x17, 0x94, 0xbb, 0xf6, 0x6b, 0xa8, 0x9d, 0x0e, 0xb0, 0x09, 0xea,
	0x9a, 0xec, 0x8a, 0x0f, 0x3c, 0x1e, 0xf1, 0x53, 0xd0, 0xb6, 0x61, 0x9c, 0x4b, 0x23, 0xf5, 0x41,
	0xbd, 0xc4, 0xc8, 0xb5, 0x40, 0x0e, 0x87, 0xca, 0x73, 0xd4, 0xf5, 0x40, 0x97, 0x4d, 0x6c, 0x40,
	0xc5, 0x9f, 0xbf, 0x7b, 0x35, 0xf5, 0x27, 0xe6, 0x2d, 0x7c, 0x17, 0xaa, 0xde, 0x7b, 0x6f, 0x3a,
	0xf3, 0x46, 0xb3, 0xb1, 0x89, 0xf0, 0x3d, 0x30, 0x16, 0xfe, 0xff, 0x86, 0x82, 0x01, 0xf4, 0x85,
	0xff, 0x66, 0xfe, 0xc1, 0x37, 0xd5, 0xc1, 0x2f, 0x04, 0xba, 0x2f, 0xf2, 0xf1, 0x27, 0xd0, 0xc4,
	0x03, 0xb0, 0x55, 0x12, 0xcf, 0x75, 0xda, 0xad, 0x0b, 0x13, 0xf9, 0x5a, 0xe7, 0xc9, 0xf7, 0xdf,
	0x7f, 0x7e, 0x28, 0x2d, 0xfc, 0xc0, 0x5d, 0x1e, 0xfb, 0xee, 0xbe, 0x70, 0x7a, 0x70, 0xf7, 0x47,
	0xeb, 0x07, 0xfc, 0x19, 0x40, 0x88, 0x92, 0x8c, 0x47, 0x57, 0xc9, 0x93, 0xa0, 0xc7, 0xd7, 0xbb,
	0x75, 0x1a, 0x82, 0x66, 0x38, 0xba, 0xa4, 0x0d, 0x51, 0x77, 0xa4, 0x7d, 0x54, 0xc3, 0x24, 0xfa,
	0xa2, 0x8b, 0x1f, 0xf0, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x33, 0xf8, 0xb2, 0xb6,
	0x02, 0x00, 0x00,
}
